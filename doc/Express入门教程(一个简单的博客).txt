#
Express入门教程：一个简单的博客
1.新建一个工程
	$ express -e blog
	$ cd blog && npm install
	$ DEBUG=blog node ./bin/www //运行 (windows 下：DEBUG=blog:* npm start )
2.工程结构
	app.js：启动文件，或者说入口文件
	package.json：存储着工程的信息及模块依赖,当在 dependencies 中添加依赖的模块时,运行npm install,npm 会检查当前目录下的 package.json，并自动安装所有指定的模块
	node_modules：存放 package.json 中安装的模块，当你在 package.json 添加依赖的模块并安装后，存放在这个文件夹下
	public：存放 image、css、js 等文件
	routes：存放路由文件
	views：存放视图文件或者说模版文件
	bin：存放可执行文件
(1)app.js
	var express = require('express');
	var path = require('path');
	var favicon = require('serve-favicon');
	var logger = require('morgan');
	var cookieParser = require('cookie-parser');
	var bodyParser = require('body-parser');

	var routes = require('./routes/index');
	var users = require('./routes/users');

	var app = express();	//生成一个express实例 app。

	// view engine setup
	app.set('views', path.join(__dirname, 'views')); //设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,
													 //__dirname 为全局变量,存储当前正在执行的脚本所在的目录。
	app.set('view engine', 'ejs');					 //设置视图模板引擎为 ejs。

	app.use(logger('dev'));									//加载日志中间件。
	app.use(bodyParser.json());								//加载解析json的中间件
	app.use(bodyParser.urlencoded({ extended: false }));	//加载解析urlencoded请求体的中间件
	app.use(cookieParser());								//加载解析cookie的中间件
	app.use(express.static(path.join(__dirname, 'public')));//设置public文件夹为存放静态文件的目录
	app.use(favicon(__dirname + '/public/favicon.ico')); //设置/public/favicon.ico为favicon图标。

	app.use('/', routes);		//路由控制器
	app.use('/users', users);

	//捕获404错误，并转发到错误处理器。
	app.use(function(req, res, next) {
	    var err = new Error('Not Found');
	    err.status = 404;
	    next(err);
	});

	// 开发环境下的错误处理器，将错误信息渲染error模版并显示到浏览器中
	if (app.get('env') === 'development') {
	    app.use(function(err, req, res, next) {
	        res.status(err.status || 500);
	        res.render('error', {
	            message: err.message,
	            error: err
	        });
	    });
	}

	// 生产环境下的错误处理器，将错误信息渲染error模版并显示到浏览器中
	app.use(function(err, req, res, next) {
	    res.status(err.status || 500);
	    res.render('error', {
	        message: err.message,
	        error: {}
	    });
	});

	module.exports = app;	//导出app实例供其他模块调用
(2)bin/www
	#!/usr/bin/env node    					//表明是 node 可执行文件
	var debug = require('debug')('blog');	//引入debug模块，打印调试日志
	var app = require('../app');			//引入我们上面导出的app实例

	app.set('port', process.env.PORT || 3000);	//设置端口号

	//启动工程并监听3000端口，成功后打印 Express server listening on port 3000
	var server = app.listen(app.get('port'), function() {
	  debug('Express server listening on port ' + server.address().port);
	});
(3)routes/index.js
	var express = require('express');
	var router = express.Router();

	/* GET home page. */
	router.get('/', function(req, res) {
	  res.render('index', { title: 'Express' });
	});

	module.exports = router;
  生成一个路由实例用来捕获访问主页的GET请求，导出这个路由并在app.js中通过app.use('/', routes); 加载。这样，
当访问主页时，就会调用res.render('index', { title: 'Express' });渲染views/index.ejs模版并显示到浏览器中。

Ps:
	在渲染模板(views/index.ejs)时我们传入了一个变量 title 值为 express 字符串,模板引擎会将所有 <%= title %> 替换为 express
	<!DOCTYPE html>
	<html>
	  <head>
	    <title><%= title %></title>
	    <link rel="stylesheet" href="/stylesheets/style.css"'" />
	  </head>
	  <body>
	    <h1><%= title %></h1>
	    <p>Welcome to <%= title %></p>
	  </body>
	</html>
3.路由控制---routes/index.js
	router.get('/', function(req, res){
	  res.render('index', { title: 'Express' });
	});
  以上代码实现了路由的功能,我们当然可以不要 routes/index.js 文件,把实现路由功能的代码都放在 app.js 里,
但随着时间的推移 app.js 会变得臃肿难以维护,这也违背了代码模块化的思想,所以我们把实现路由功能的代码都放在 routes/index.js 里.
官方给出的写法是在 app.js 中实现了简单的路由分配,然后再去 index.js 中找到对应的路由函数,最终实现路由功能.
我们不妨把路由控制器和实现路由功能的函数都放到 index.js 里，app.js 中只有一个总的路由接口。
	//app.js
	var express = require('express');
	var path = require('path');
	var favicon = require('serve-favicon');
	var logger = require('morgan');
	var cookieParser = require('cookie-parser');
	var bodyParser = require('body-parser');

	var routes = require('./routes/index');

	var app = express();

	app.set('port', process.env.PORT || 3000);
	app.set('views', path.join(__dirname, 'views'));
	app.set('view engine', 'ejs');

	//app.use(favicon(__dirname + '/public/favicon.ico'));
	app.use(logger('dev'));
	app.use(bodyParser.json());
	app.use(bodyParser.urlencoded({ extended: true }));
	app.use(cookieParser());
	app.use(express.static(path.join(__dirname, 'public')));

	routes(app);

	app.listen(app.get('port'), function() {
	  console.log('Express server listening on port ' + app.get('port'));
	});
	// index.js
	module.exports = function(app) {
	  app.get('/', function (req, res) {
	    res.render('index', { title: 'Express' });
	  });
	};
(1)路由规则
  express封装get和 post两种请求方式,app.get()和app.post()的第一个参数都为请求的路径,第二个参数为处理请求的回调函数,
回调函数有两个参数分别是 req 和 res，代表请求信息和响应信息 。路径请求及对应的获取路径有以下几种形式：
req.query处理 get 请求，获取 get 请求参数
	// GET /search?q=tobi+ferret  
	req.query.q  
	// => "tobi ferret"  

	// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse  
	req.query.order  
	// => "desc"  

	req.query.shoe.color  
	// => "blue"  

	req.query.shoe.type  
	// => "converse"  
req.body处理 post 请求，获取 post 请求体
	// POST user[name]=tobi&user[email]=tobi@learnboost.com  
	req.body.user.name  
	// => "tobi"  

	req.body.user.email  
	// => "tobi@learnboost.com"  

	// POST { "name": "tobi" }  
	req.body.name  
	// => "tobi"  
req.params处理 /:xxx 形式的 get 或 post 请求，获取请求参数
	// GET /user/tj  
	req.params.name  
	// => "tj"  

	// GET /file/javascripts/jquery.js  
	req.params[0]  
	// => "javascripts/jquery.js"  
req.param(name)处理 get 和 post 请求，但查找优先级由高到低为 req.params→req.body→req.query
	// ?name=tobi  
	req.param('name')  
	// => "tobi"  

	// POST name=tobi  
	req.param('name')  
	// => "tobi"  

	// /user/tobi for /user/:name   
	req.param('name')  
	// => "tobi"  
4.模版引擎:将页面模板和要显示的数据结合起来生成 HTML 页面。它既可以运 行在服务器端又可以运行在客户端，大多数时候它都在服务器端直接被解析为 HTML，解析完成后再传输给客户端
(1)使用模板引擎
	app.set('views', __dirname + '/views');
	app.set('view engine', 'ejs');
在routes/index.js中通过调用res.render()渲染模版,并将其产生的页面直接返回给客户端.它接受两个参数,第一个是模板的名称,
即 views 目录下的模板文件名,扩展名 .ejs 可选.第二个参数是传递给模板的数据对象,用于模板翻译.
Ps:
  我们通过 app.use(express.static(path.join(__dirname, 'public'))) 设置了静态文件目录为 public 文件夹,
所以上面代码中的 href='/stylesheets/style.css' 就相当于href='public/stylesheets/style.css' 。
(2)标签系统
	<% code %>：JavaScript 代码。
	<%= code %>：显示替换过 HTML 特殊字符的内容。
	<%- code %>：显示原始 HTML 内容。
  <%= code %>和<%- code %>的区别,当变量 code 为普通字符串时,两者没有区别.当 code 比如为<h1>hello</h1>这种字符串时,
<%= code %> 会原样输出 <h1>hello</h1>，而 <%- code %> 则会显示 H1 大的 hello 字符串。
5.搭建多人博客
	未登录：主页左侧导航显示 home、login、register，右侧显示已发表的文章、发表日期及作者。
	登陆后：主页左侧导航显示 home、post、logout，右侧显示已发表的文章、发表日期及作者。
	用户登录、注册、发表成功以及登出后都返回到主页。
(1)路由规划
	//index.js
	module.exports = function(app) {
	  app.get('/', function (req, res) {
	    res.render('index', { title: '主页' });
	  });
	  app.get('/reg', function (req, res) {
	    res.render('reg', { title: '注册' });
	  });
	  app.post('/reg', function (req, res) {
	  });
	  app.get('/login', function (req, res) {
	    res.render('login', { title: '登录' });
	  });
	  app.post('/login', function (req, res) {
	  });
	  app.get('/post', function (req, res) {
	    res.render('post', { title: '发表' });
	  });
	  app.post('/post', function (req, res) {
	  });
	  app.get('/logout', function (req, res) {
	  });
	};
(2)MongoDB数据库
	没有关系型数据库中行和表的概念,不过有类似的文档和集合的概念.文档是 MongoDB 最基本的单位,每个文档都会以唯一的 _id 标识,
文档的属性为 key/value 的键值对形式,文档内可以嵌套另一个文档,因此可以存储比较复杂的数据类型.集合是许多文档的总和,
一个数据库可以有多个集合,一个集合可以有多个文档.
	1.安装MongoDB
	下载对应系统的 MongoDB 压缩包即可.解压后将文件夹重命名为 mongodb,并在 mongodb 文件夹里新建 blog 文件夹作为我们博客内容的存储目录
		./mongod --dbpath ../blog/
	2.连接MongoDB
	打开 package.json，在 dependencies 中添加一行:
		"mongodb": "1.4.15"
	运行npm install
	在工程的根目录中创建 settings.js 文件
		module.exports = { 
		  cookieSecret: 'myblog', 
		  db: 'blog', 
		  host: 'localhost',
		  port: 27017
		};
	根目录下新建 models 文件夹，并在 models 文件夹下新建 db.js
	var settings = require('../settings'),
	        Db = require('mongodb').Db,
	        Connection = require('mongodb').Connection,
	        Server = require('mongodb').Server;
	    module.exports = new Db(settings.db, new Server(settings.host, settings.port),
	 {safe: true});
	打开 app.js，在 var routes = require('./routes/index'); 下添加:
		var settings = require('./settings');
(3)会话支持
	默认情况下是把用户信息存储在内存中,但我们既然已经有了 MongoDB,不妨把会话信息存储在数据库中,便于持久维护.
为了使用这一功能,我们需要借助 express-session 和 connect-mongo 这两个第三方中间件,在 package.json 中添加：
	"express-session": "1.9.1",
	"connect-mongo": "0.4.1"
	1.运行npm install安装模块,打开app.js，添加以下代码:
		var session = require('express-session');
		var MongoStore = require('connect-mongo')(session);

		app.use(session({
		  secret: settings.cookieSecret,
		  key: settings.db,//cookie name
		  cookie: {maxAge: 1000 * 60 * 60 * 24 * 30},//30 days
		  store: new MongoStore({
		    db: settings.db,
		    host: settings.host,
		    port: settings.port
		  })
		}));
	使用 express-session 和 connect-mongo 模块实现了将会化信息存储到mongoldb中
注册和登陆
(1)页面设计
修改 views/index.ejs 如下：
	<%- include header %>
	这是主页
	<%- include footer %>
在 views 文件夹下新建 header.ejs，添加如下代码：
	<!DOCTYPE html>
	<html>
	<head>
	<meta charset="UTF-8" />
	<title>Blog</title>
	<link rel="stylesheet" href="/stylesheets/style.css">
	</head>
	<body>

	<header>
	<h1><%= title %></h1>
	</header>

	<nav>
	<span><a title="主页" href="/">home</a></span>
	<span><a title="登录" href="/login">login</a></span>
	<span><a title="注册" href="/reg">register</a></span>
	</nav>

	<article>
新建 footer.ejs，添加如下代码：
	</article>
	</body>
	</html>
修改 public/stylesheets/style.css 如下：
	/* inspired by http://yihui.name/cn/ */
	*{padding:0;margin:0;}
	body{width:600px;margin:2em auto;padding:0 2em;font-size:14px;font-family:"Microsoft YaHei";}
	p{line-height:24px;margin:1em 0;}
	header{padding:.5em 0;border-bottom:1px solid #cccccc;}
	nav{float:left;font-family:"Microsoft YaHei";font-size:1.1em;text-transform:uppercase;margin-left:-12em;width:9em;text-align:right;}
	nav a{display:block;text-decoration:none;padding:.7em 1em;color:#000000;}
	nav a:hover{background-color:#ff0000;color:#f9f9f9;-webkit-transition:color .2s linear;}
	article{font-size:16px;padding-top:.5em;}
	article a{color:#dd0000;text-decoration:none;}
	article a:hover{color:#333333;text-decoration:underline;}
	.info{font-size:14px;}
在 views 文件夹下新建 login.ejs
	<%- include header %>
	<form method="post">
	  用户名：<input type="text" name="name"/><br />
	  密码：  <input type="password" name="password"/><br />
	         <input type="submit" value="登录"/>
	</form>
	<%- include footer %>
在 views 文件夹下新建 reg.ejs
	<%- include header %>
	<form method="post">
	  用户名：  <input type="text" name="name"/><br />
	  密码：    <input type="password" name="password"/><br />
	  确认密码：<input type="password" name="password-repeat"/><br />
	  邮箱：    <input type="email" name="email"/><br />
	           <input type="submit" value="注册"/>
	</form>
	<%- include footer %>
Ps:
	每次我们更新代码后,都需要手动停止并重启应用,使用 supervisor 模块可以解决这个问题,每当我们保存修改的文件时,
supervisor 都会自动帮我们重启应用。
	$ npm install -g supervisor
安装 supervisor 。使用 supervisor 命令启动 app.js：
	$ supervisor app.js
(2)页面通知:我们需要引入 flash 模块来实现页面通知（即成功与错误信息的显示）的功能,flash 是一个在 session 中用于存储信息的特定区域
在 package.json 添加一行代码：
	"connect-flash": "0.1.1"    
然后 npm install 安装 connect-flash 模块。修改 app.js ，在 var settings = require('./settings'); 后添加：
	var flash = require('connect-flash');
在 app.set('view engine', 'ejs'); 后添加：
	app.use(flash());
(3)注册响应
在 models 文件夹下新建 user.js，添加如下代码：
	var mongodb = require('./db');

	function User(user) {
	  this.name = user.name;
	  this.password = user.password;
	  this.email = user.email;
	};

	module.exports = User;

	//存储用户信息
	User.prototype.save = function(callback) {
	  //要存入数据库的用户文档
	  var user = {
	      name: this.name,
	      password: this.password,
	      email: this.email
	  };
	  //打开数据库
	  mongodb.open(function (err, db) {
	    if (err) {
	      return callback(err);//错误，返回 err 信息
	    }
	    //读取 users 集合
	    db.collection('users', function (err, collection) {
	      if (err) {
	        mongodb.close();
	        return callback(err);//错误，返回 err 信息
	      }
	      //将用户数据插入 users 集合
	      collection.insert(user, {
	        safe: true
	      }, function (err, user) {
	        mongodb.close();
	        if (err) {
	          return callback(err);//错误，返回 err 信息
	        }
	        callback(null, user[0]);//成功！err 为 null，并返回存储后的用户文档
	      });
	    });
	  });
	};

	//读取用户信息
	User.get = function(name, callback) {
	  //打开数据库
	  mongodb.open(function (err, db) {
	    if (err) {
	      return callback(err);//错误，返回 err 信息
	    }
	    //读取 users 集合
	    db.collection('users', function (err, collection) {
	      if (err) {
	        mongodb.close();
	        return callback(err);//错误，返回 err 信息
	      }
	      //查找用户名（name键）值为 name 一个文档
	      collection.findOne({
	        name: name
	      }, function (err, user) {
	        mongodb.close();
	        if (err) {
	          return callback(err);//失败！返回 err 信息
	        }
	        callback(null, user);//成功！返回查询的用户信息
	      });
	    });
	  });
	};
打开 index.js ，在最前面添加如下代码：
	var crypto = require('crypto'),
	    User = require('../models/user.js');
	app.post('/reg', function (req, res) {
	  var name = req.body.name,
	      password = req.body.password,
	      password_re = req.body['password-repeat'];
	  //检验用户两次输入的密码是否一致
	  if (password_re != password) {
	    req.flash('error', '两次输入的密码不一致!'); 
	    return res.redirect('/reg');//返回注册页
	  }
	  //生成密码的 md5 值
	  var md5 = crypto.createHash('md5'),
	      password = md5.update(req.body.password).digest('hex');
	  var newUser = new User({
	      name: name,
	      password: password,
	      email: req.body.email
	  });
	  //检查用户名是否已经存在 
	  User.get(newUser.name, function (err, user) {
	    if (err) {
	      req.flash('error', err);
	      return res.redirect('/');
	    }
	    if (user) {
	      req.flash('error', '用户已存在!');
	      return res.redirect('/reg');//返回注册页
	    }
	    //如果不存在则新增用户
	    newUser.save(function (err, user) {
	      if (err) {
	        req.flash('error', err);
	        return res.redirect('/reg');//注册失败返回主册页
	      }
	      req.session.user = newUser;//用户信息存入 session
	      req.flash('success', '注册成功!');
	      res.redirect('/');//注册成功后返回主页
	    });
	  });
	});
req.body: 就是POST请求信息解析过后的对象，例如我们要访问 POST 来的表单内的 name="password" 域的值
res.redirect: 重定向功能，实现了页面的跳转
User: User 是一个描述数据的对象，即 MVC 架构中的模型。
Ps:
查看数据库中是否存入了用户的信息，打开一个命令行切换到 mongodb/bin/
	>use blog
	>db.users.find()
修改 header.ejs，将 <nav></nav> 修改如下：
	<nav>
	<span><a title="主页" href="/">home</a></span>
	<% if (user) { %>
	  <span><a title="发表" href="/post">post</a></span>
	  <span><a title="登出" href="/logout">logout</a></span>
	<% } else { %>
	  <span><a title="登录" href="/login">login</a></span>
	  <span><a title="注册" href="/reg">register</a></span>
	<% } %>
	</nav>
在 <article> 后添加如下代码
	<% if (success) { %>
	  <div><%= success %></div>
	<% } %>
	<% if (error) { %>
	  <div><%= error %> </div>
	<% } %>
修改 index.js ，将 app.get('/') 修改如下：
	app.get('/', function (req, res) {
	  res.render('index', {
	    title: '主页',
	    user: req.session.user,
	    success: req.flash('success').toString(),
	    error: req.flash('error').toString()
	  });
	});
将 app.get('reg') 修改如下：
	app.get('/reg', function (req, res) {
	  res.render('reg', {
	    title: '注册',
	    user: req.session.user,
	    success: req.flash('success').toString(),
	    error: req.flash('error').toString()
	  });
	});
(4)登录与登出响应
打开 index.js,将 app.post('/login') 修改如下：
	app.post('/login', function (req, res) {
	  //生成密码的 md5 值
	  var md5 = crypto.createHash('md5'),
	      password = md5.update(req.body.password).digest('hex');
	  //检查用户是否存在
	  User.get(req.body.name, function (err, user) {
	    if (!user) {
	      req.flash('error', '用户不存在!'); 
	      return res.redirect('/login');//用户不存在则跳转到登录页
	    }
	    //检查密码是否一致
	    if (user.password != password) {
	      req.flash('error', '密码错误!'); 
	      return res.redirect('/login');//密码错误则跳转到登录页
	    }
	    //用户名密码都匹配后，将用户信息存入 session
	    req.session.user = user;
	    req.flash('success', '登陆成功!');
	    res.redirect('/');//登陆成功后跳转到主页
	  });
	});
将 app.get('/login') 修改如下：
	app.get('/login', function (req, res) {
	    res.render('login', {
	        title: '登录',
	        user: req.session.user,
	        success: req.flash('success').toString(),
	        error: req.flash('error').toString()});
	});
接下来我们实现登出响应。修改 app.get('/logout') 如下：
	app.get('/logout', function (req, res) {
	  req.session.user = null;
	  req.flash('success', '登出成功!');
	  res.redirect('/');//登出成功后跳转到主页
	});
(5)页面权限控制:即注册和登陆页面应该阻止已登陆的用户访问，登出及后面我们将要实现的发表页只对已登录的用户开放。
checkNotLogin 和 checkLogin 用来检测是否登陆，并通过 next() 转移控制权，检测到未登录则跳转到登录页，
检测到已登录则跳转到前一个页面。最终 index.js 代码如下：
var crypto = require('crypto'),
    User = require('../models/user.js');

module.exports = function(app) {
  app.get('/', function (req, res) {
    ...
  });

  app.get('/reg', checkNotLogin);
  app.get('/reg', function (req, res) {
    ...
  });

  app.post('/reg', checkNotLogin);
  app.post('/reg', function (req, res) {
    ...
  });

  app.get('/login', checkNotLogin);
  app.get('/login', function (req, res) {
    ...
  });

  app.post('/login', checkNotLogin);
  app.post('/login', function (req, res) {
    ...
  });

  app.get('/post', checkLogin);
  app.get('/post', function (req, res) {
   ...
  });

  app.post('/post', checkLogin);
  app.post('/post', function (req, res) {
  });

  app.get('/logout', checkLogin);
  app.get('/logout', function (req, res) {
    ...
  });

  function checkLogin(req, res, next) {
    if (!req.session.user) {
      req.flash('error', '未登录!'); 
      res.redirect('/login');
    }
    next();
  }

  function checkNotLogin(req, res, next) {
    if (req.session.user) {
      req.flash('error', '已登录!'); 
      res.redirect('back');
    }
    next();
  }
};

(6)发表文章
完成发表页的页面设计。在 views 文件夹下新建 post.ejs:
	<%- include header %>
	<form method="post">
	  标题：<br />
	  <input type="text" name="title" /><br />
	  正文：<br />
	  <textarea name="post" rows="20" cols="100"></textarea><br />
	  <input type="submit" value="发表" />
	</form>
	<%- include footer %>
在 models 文件夹下新建 post.js ，添加如下代码：
	var mongodb = require('./db');

	function Post(name, title, post) {
	  this.name = name;
	  this.title = title;
	  this.post = post;
	}

	module.exports = Post;

	//存储一篇文章及其相关信息
	Post.prototype.save = function(callback) {
	  var date = new Date();
	  //存储各种时间格式，方便以后扩展
	  var time = {
	      date: date,
	      year : date.getFullYear(),
	      month : date.getFullYear() + "-" + (date.getMonth() + 1),
	      day : date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate(),
	      minute : date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " + 
	      date.getHours() + ":" + (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) 
	  }
	  //要存入数据库的文档
	  var post = {
	      name: this.name,
	      time: time,
	      title: this.title,
	      post: this.post
	  };
	  //打开数据库
	  mongodb.open(function (err, db) {
	    if (err) {
	      return callback(err);
	    }
	    //读取 posts 集合
	    db.collection('posts', function (err, collection) {
	      if (err) {
	        mongodb.close();
	        return callback(err);
	      }
	      //将文档插入 posts 集合
	      collection.insert(post, {
	        safe: true
	      }, function (err) {
	        mongodb.close();
	        if (err) {
	          return callback(err);//失败！返回 err
	        }
	        callback(null);//返回 err 为 null
	      });
	    });
	  });
	};

	//读取文章及其相关信息
	Post.get = function(name, callback) {
	  //打开数据库
	  mongodb.open(function (err, db) {
	    if (err) {
	      return callback(err);
	    }
	    //读取 posts 集合
	    db.collection('posts', function(err, collection) {
	      if (err) {
	        mongodb.close();
	        return callback(err);
	      }
	      var query = {};
	      if (name) {
	        query.name = name;
	      }
	      //根据 query 对象查询文章
	      collection.find(query).sort({
	        time: -1
	      }).toArray(function (err, docs) {
	        mongodb.close();
	        if (err) {
	          return callback(err);//失败！返回 err
	        }
	        callback(null, docs);//成功！以数组形式返回查询的结果
	      });
	    });
	  });
	};
打开 index.js ，在 User = require('../models/user.js') 后添加一行代码:
	Post = require('../models/post.js');
修改 app.post('/post') 如下：
	app.post('/post', checkLogin);
	app.post('/post', function (req, res) {
	  var currentUser = req.session.user,
	      post = new Post(currentUser.name, req.body.title, req.body.post);
	  post.save(function (err) {
	    if (err) {
	      req.flash('error', err); 
	      return res.redirect('/');
	    }
	    req.flash('success', '发布成功!');
	    res.redirect('/');//发表成功跳转到主页
	  });
	});
打开 index.ejs,修改如下:
	<%- include header %>
	<% posts.forEach(function (post, index) { %>
	  <p><h2><a href="#"><%= post.title %></a></h2></p>
	  <p class="info">
	    作者：<a href="#"><%= post.name %></a> | 
	    日期：<%= post.time.minute %>
	  </p>
	  <p><%- post.post %></p>
	<% }) %>
	<%- include footer %>
打开index.js,修改 app.get('/')如下:
	app.get('/', function (req, res) {
	  Post.get(null, function (err, posts) {
	    if (err) {
	      posts = [];
	    } 
	    res.render('index', {
	      title: '主页',
	      user: req.session.user,
	      posts: posts,
	      success: req.flash('success').toString(),
	      error: req.flash('error').toString()
	    });
	  });
	});






